
export interface ProjectDetails {
  _id?: string; 
  projectId?: string 
  projectName: string;
  projectDescription?: string;
  projectType: string; 
  projectLocation?: string;
  totalBudget: number;
  currency: string;
  functionalRequirements: string;
  aestheticPreferences?: string;
  totalEstimatedCost?: number; 
  createdAt?: Date; 
  updatedAt?: Date;
}

export interface InitialPlanPhase {
  _id?: string; 
  phaseId: string; 
  phaseName: string;
  estimatedDuration: number; 
  estimatedCost: number;
  order: number; 
  tasks?: Task[]; 
}

export interface InitialPlanDocument {
    _id?: string; 
    projectId: string; 
    phases: InitialPlanPhase[]; 
    totalEstimatedCost: number;
    createdAt?: Date;
    updatedAt?: Date;
}


export interface Task {
    _id?: string; 
    projectId: string; 
    phaseUUID: string; 
    title: string;
    description?: string;
    quantity: number;
    unitOfMeasure: string; 
    unitPrice: number;
    estimatedDuration?: number | null; 
    estimatedCost: number; 
    status: 'Pendiente' | 'En Progreso' | 'Realizado';
    profitMargin?: number | null; 
    laborCost?: number | null; 
    executionPercentage?: number | null; 
    startDate?: Date | string | null; 
    endDate?: Date | string | null; 
    createdAt?: Date;
    updatedAt?: Date;
}

export interface MaterialProject {
  _id?: string; 
  projectId: string; 
  title: string; 
  referenceCode?: string | null; // Optional
  brand?: string | null; // Optional
  supplier?: string | null; // Optional
  description?: string | null; // Optional
  unitOfMeasure: string;
  estimatedUnitPrice: number;
  profitMargin?: number | null;
  createdAt?: Date;
  updatedAt?: Date;
}

export interface MaterialTask {
  _id?: string; 
  taskId: string; 
  materialProjectId: string | MaterialProject; 
  phaseId: string; 
  quantityUsed: number;
  materialCostForTask?: number; 
  profitMarginForTaskMaterial?: number | null; 
  purchasedValueForTask?: number | null; 
  createdAt?: Date;
  updatedAt?: Date;
}

// Type for the AI's output which includes tasks nested in phases
export interface AIPhaseWithTasks extends Omit<InitialPlanPhase, 'tasks' | '_id' | 'order'> { // order is backend managed usually
  tasks: {
    taskName: string;
    estimatedDuration: number;
    estimatedCost: number;
  }[];
}
export type AIPlanOutput = AIPhaseWithTasks[];


export interface FrontendInitialPlanPhase extends AIPhaseWithTasks {
  phaseId: string; // UUID generated by backend
  order: number;
   _id?: string; // _id from DB for existing phases
}

export interface FrontendGeneratedPlanResponse {
  projectId: string;
  initialPlanId: string;
  initialPlan: FrontendInitialPlanPhase[]; 
  totalEstimatedCost: number;
}
